name: Cloud N1 OpenWrt

on:
  push:
    branches:
      - main
    paths:
      - 'README.md'
      - 'script.sh'
      - 'config.sh'
  schedule:
    - cron: 0 8 * * 0   # 每周日早上 8 点自动编译

env:
  # ========= 基础环境设置 =========
  # 源码仓库（底包来源） → Lean's OpenWrt（coolsnowwolf/lede）
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master

  # 编译脚本与配置脚本（外部独立文件）
  SCRIPT_SH: script.sh
  CONFIG_SH: config.sh

  # 上传、打包与时区设置
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

  # 内核显示版本（用于命名和发布信息，不直接影响源码内核）
  KERNEL_VERSION: 6.1.79

jobs:
  build_openwrt:
    name: Build OpenWrt and release
    runs-on: ubuntu-22.04

    steps:

    # ========= 1. 清理空间 =========
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    # ========= 2. 检出当前仓库 =========
    - name: Checkout
      uses: actions/checkout@v3.1.0
      with:
        ref: main

    - name: Disk space
      run: df -h

    # ========= 3. 初始化编译环境 =========
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt-get -qq update --fix-missing
        sudo -E apt-get -qq full-upgrade
        # 安装 OpenWrt 编译所需工具链（完整依赖）
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"

    # ========= 4. 拉取底包源码（Lean 的 lede） =========
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV

    # ========= 5. 更新 feeds（软件源） =========
    # 说明：这里的 feeds 主要来自 lede 官方和第三方（helloworld）
    - name: Update feeds
      run: |
        [ -e files ] && mv files openwrt/files
        chmod +x $SCRIPT_SH
        ./$SCRIPT_SH
        cd openwrt
        echo "src-git helloworld https://github.com/fw876/helloworld.git" >> "feeds.conf.default"
        ./scripts/feeds update -a
        # 修补 xfsprogs 源码编译问题
        sed -i 's/TARGET_CFLAGS += -DHAVE_MAP_SYNC/TARGET_CFLAGS += -DHAVE_MAP_SYNC -D_LARGEFILE64_SOURCE/' feeds/packages/utils/xfsprogs/Makefile
        ./scripts/feeds install -a

    # ========= 6. 加载自定义配置 =========
    # 说明：config.sh 用于选择目标架构 (armvirt 64)、默认插件等
    - name: Load custom configuration
      run: |
        chmod +x $CONFIG_SH
        ./$CONFIG_SH

    # ========= 7. 下载编译所需软件包 =========
    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    # ========= 8. 编译底包 =========
    # 说明：此阶段会编译出 openwrt-armvirt-64-default-rootfs.tar.gz，
    #       还不会生成 N1 可刷镜像。
    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        df -h
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        echo "status=success" >> $GITHUB_OUTPUT

    # ========= 9. 打包 N1 固件 =========
    # 说明：
    #   - 该 Action 调用 ophub/flippy-openwrt-actions
    #   - 实际使用 Flippy 的 Linux 内核（通常来自 unifreq/openwrt_packit）
    #   - 将 ARMvirt 通用根文件系统打包为 s905d（N1）专用镜像
    - name: Package Armvirt as OpenWrt
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d             # N1 所属 SoC
        KERNEL_VERSION_NAME: ${{ env.KERNEL_VERSION }}
        WHOAMI: huangqian8

    # ========= 10. 整理输出文件 =========
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image sha256sums version.buildinfo feeds.buildinfo openwrt-armvirt-64-generic-kernel.bin openwrt-armvirt-64-generic.manifest
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # ========= 11. 上传编译产物 =========
    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: |
            ${{ env.FIRMWARE }}
            ${{ env.PACKAGED_OUTPUTPATH }}

    # ========= 12. 创建 GitHub Release =========
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} ❤️ | N1-OpenWrt 自动编译打包
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: main
        token: ${{ secrets.actions_release }}
        body: |
          📦 编译使用底包：
          https://github.com/coolsnowwolf/lede （分支：${{ env.REPO_BRANCH }}）

          🧩 内核来源：
          Flippy 内核（由 ophub/flippy-openwrt-actions 从 unifreq/openwrt_packit 拉取）

          🕒 打包日期：${{ env.DATE }}
          🧠 内核版本号标识：${{ env.KERNEL_VERSION }}
          🌐 默认IP：192.168.1.1
          👤 用户名/密码：root / password
        artifacts: "${{ env.FIRMWARE }}/*.*,${{ env.PACKAGED_OUTPUTPATH }}/*.*"

    # ========= 13. 删除旧 Release（保留最近 3 个） =========
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.actions_release }}
